{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const delay = refs.form.elements.delay.value;\n  console.log(delay);\n  const state = refs.form.elements.state.value;\n  console.log(state);\n  const promise = new Promise((resolve, reject) => {\n    if (state === 'fulfiled') {\n      setTimeout(() => resolve(delay), delay);\n    } else if (state === 'rejected') {\n      setTimeout(() => reject(delay), delay);\n    }\n  });\n  promise.then;\n}\n\n// const refs = {\n//   delayInput: document.querySelector(\"input[name='delay']\"),\n//   checkboxState: document.querySelectorAll(\"input[name='state']\"),\n//   submitForm: document.querySelector('.form'),\n// };\n\n// let delayTime = 0;\n// refs.delayInput.addEventListener('change', () => {\n//   delayTime = refs.delayInput.value;\n// });\n\n// let state = [];\n// const checkboxArray = Array.from(refs.checkboxState);\n// checkboxArray.forEach(checkbox => {\n//   checkbox.addEventListener('change', onCheckbox);\n// });\n\n// function onCheckbox() {\n//   state = checkboxArray\n//     .filter(checkbox => checkbox.checked)\n//     .map(checkbox => checkbox.value);\n// }\n\n// refs.submitForm.addEventListener('submit', onSubmit);\n// function onSubmit(event) {\n//   event.preventDefault();\n//   refs.delayInput.value = '';\n//   checkboxArray.forEach(checkbox => {\n//     checkbox.checked = false;\n//   });\n//   let selectedState = '';\n//   let selectedDelayTime = 0;\n//   if (state.includes('fulfilled')) {\n//     selectedState = 'fulfilled';\n//     selectedDelayTime = delayTime;\n//   } else if (state.includes('rejected')) {\n//     selectedState = 'rejected';\n//     selectedDelayTime = delayTime;\n//   }\n\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (selectedState === 'fulfilled') {\n//         resolve(`✅ Fulfilled promise in ${selectedDelayTime}ms`);\n//       } else if (selectedState === 'rejected') {\n//         reject(`❌ Rejected promise in ${selectedDelayTime}ms`);\n//       }\n//     }, selectedDelayTime);\n//   });\n//   promise\n//     .then(message => {\n//       iziToast.show({\n//         message: message,\n//         messageColor: '#fff',\n//         backgroundColor: '#59a10d',\n//         position: 'topRight',\n//         progressBar: false,\n//       });\n//     })\n//     .catch(error => {\n//       iziToast.show({\n//         message: error,\n//         messageColor: '#fff',\n//         backgroundColor: '#ef4040',\n//         position: 'topRight',\n//         progressBar: false,\n//       });\n//     });\n// }\n"],"names":["refs","onSubmit","event","delay","state","resolve","reject"],"mappings":"4HAGA,MAAMA,EAAO,CACX,KAAM,SAAS,cAAc,OAAO,EACpC,UAAW,SAAS,cAAc,uBAAuB,CAC3D,EAEAA,EAAK,UAAU,iBAAiB,QAASC,CAAQ,EAEjD,SAASA,EAASC,EAAO,CACvBA,EAAM,eAAc,EACpB,MAAMC,EAAQH,EAAK,KAAK,SAAS,MAAM,MACvC,QAAQ,IAAIG,CAAK,EACjB,MAAMC,EAAQJ,EAAK,KAAK,SAAS,MAAM,MACvC,QAAQ,IAAII,CAAK,EACD,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC3CF,IAAU,WACZ,WAAW,IAAMC,EAAQF,CAAK,EAAGA,CAAK,EAC7BC,IAAU,YACnB,WAAW,IAAME,EAAOH,CAAK,EAAGA,CAAK,CAE3C,CAAG,EACO,IACV"}